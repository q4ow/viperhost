generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  uuid          String    @unique
  admin         Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  files         File[]
  subscription  Subscription?
  shareLinks    ShareLink[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id        String   @id @default(cuid())
  name      String
  size      Int
  type      String
  url       String
  rawUrl    String
  fileId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shareLinks ShareLink[]
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  status               String    @default("inactive")
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  canceledAt           DateTime?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShareLink {
  id          String    @id @default(cuid())
  shareId     String    @unique
  fileId      String
  password    String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  file        File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  views       Int       @default(0)
  downloads   Int       @default(0)
}